// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"
)

var enumTempl = `// Code generated by generate-enum.go DO NOT EDIT.
package config

// UnitType type
type UnitType string

func (t UnitType) String() string {
	return string(t)
}

// UnitType enums
const (
	{{range .Categories}}
	// {{ .Name }}
	{{range .Formats}}
	UnitType{{title .Name}} UnitType = "{{.Unit}}"{{end}}
	{{end}}
)

`

type itemFormat struct {
	Name string `json:"name"`
	Unit string `json:"unit"`
}

type itemCategory struct {
	Name    string       `json:"name"`
	Formats []itemFormat `json:"formats"`
}

func cleanName(name string) string {
	name = strings.Map(func(r rune) rune {
		// 0-9
		if r >= 48 && r <= 57 {
			return r
		}

		// A-Z
		if r >= 65 && r <= 90 {
			return r
		}

		// a-z
		if r >= 97 && r <= 122 {
			return r
		}

		return -1
	}, name)

	return strings.Title(name)
}

func main() {
	dir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	if len(os.Args) == 1 {
		log.Fatalf("%s [path to dest file]\n", os.Args[0])
	}

	funcMap := template.FuncMap{
		"title": cleanName,
	}

	content, err := os.ReadFile(dir + "/resources/unit-categories.json")
	if err != nil {
		log.Fatal(err)
	}

	var categories []itemCategory

	if err := json.Unmarshal(content, &categories); err != nil {
		log.Fatal(err)
	}

	t := template.Must(template.New("enum").Funcs(funcMap).Parse(enumTempl))

	buf := bytes.NewBuffer(nil)

	if err := t.Execute(buf, struct {
		Categories []itemCategory
	}{
		Categories: categories,
	}); err != nil {
		log.Fatal(err)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile(os.Args[2], data, 0644); err != nil {
		log.Fatal(err)
	}
}
